#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 10
#define DELETED 0

// ハッシュテーブルの要素の構造体
struct HashEntry {
  int data;
  int isOccupied;
};

// ハッシュテーブルの構造体
struct HashTable {
  struct HashEntry *table;
};

// ハッシュテーブルの初期化
struct HashTable *initHashTable() {
  struct HashTable *ht = (struct HashTable *)malloc(sizeof(struct HashTable));
  ht->table = (struct HashEntry *)malloc(TABLE_SIZE * sizeof(struct HashEntry));
  for (int i = 0; i < TABLE_SIZE; i++) {
    ht->table[i].isOccupied = 0;
  }
  return ht;
}

// ハッシュ関数
int hashFunction(int data) {
  return data % TABLE_SIZE;
}

// ハッシュテーブルにデータを挿入
int insert(struct HashTable *ht, int data) {
  int index = hashFunction(data);
  while(ht->table[index].isOccupied && data != DELETED) {
    index++;
    if (index == TABLE_SIZE) return 0; // 末尾まで候補なし（失敗）
  }
  ht->table[index].data = data;
  ht->table[index].isOccupied = 1;
  return 1; // （成功）
}

// ハッシュテーブルのデータを検索
int search(struct HashTable *ht, int data) {
  int index = hashFunction(data);
  while (ht->table[index].isOccupied) { // 空白を探索＝（失敗）
    if (ht->table[index].data == data) {
      return 1; // （成功）
    }
    index++;
  }
  return 0; // （失敗）
}

// ハッシュテーブルを表示する関数
void display(struct HashTable *ht) {
  for (int i = 0; i < TABLE_SIZE; i++) {
    printf("%d: ", i);
    printf("%d\n", ht->table[i].data);
  }
}

int main() {
  struct HashTable *ht = initHashTable();

  // データを挿入
  insert(ht, 11);
  insert(ht, 21);
  insert(ht, 44);

  // ハッシュテーブルの表示
  printf("--ハッシュテーブルの内容--\n");
  display(ht);

  free(ht->table);
  free(ht);

  return 0;
}
    

  
