// グラフ理論とネットワーク
// 1-1-1
// 「graph1.txt」で辺行列で表現されるグラフに対し，
// 隣接行列「adjacent[N_MAX][N_MAX]」を作成するプログラムの作成

#include <stdio.h>
#include <stdlib.h>

#define N_MAX 100

// 配列の初期化
void initializeArray(int array[N_MAX][N_MAX]);

// 配列の一覧表示
void printArray(int N, int array[N_MAX][N_MAX]);

int main( void ) {
  int i, j;
  FILE *fp;
  char *fn = "graph1.txt";

  // 点の数
  int N;

  // 一時変数（点番号の記憶）
  int n1, n2;

  // 隣接行列
  int adjacent[N_MAX][N_MAX];

  // 配列の初期化
  initializeArray(adjacent);

  // ファイルを開いて読み込み
  if ( ( fp = fopen( fn, "r" ) ) == NULL ) {
    fprintf( stderr, "ファイル %s が開けません．\n", fn );
    exit( 1 );
  }

  // 1行目（点の数）の読み込み
  fscanf( fp, "%d", &N );

  // EOFまでscanf繰り返し
  while ( fscanf( fp, "%d %d", &n1, &n2 ) != EOF ) {
    // fscanfにおいて，正常にint２つ読み込むことができていれば「2」がreturnされる
    adjacent[n1][n2] = adjacent[n2][n1] = 1;
  }

  // 配列の一覧表示
  printArray(N, adjacent);

  fclose( fp );

  return 0;
}


void initializeArray(int adjacent[N_MAX][N_MAX]) {
  for (int i = 0; i < N_MAX; i++) {
    for (int j = i; j < N_MAX; j++) {
      adjacent[i][j] = adjacent[j][i] = 0;
    }
  }
}

void printArray(int N, int adjacent[N_MAX][N_MAX]) {
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; i++) {
      printf("%d ", adjacent[i][j]);
    }
    printf("\n");
  }
}



